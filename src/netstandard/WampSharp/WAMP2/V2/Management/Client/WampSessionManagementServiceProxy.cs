using System.Threading;
using System.Threading.Tasks;
using WampSharp.V2.CalleeProxy;
using WampSharp.V2.Client;

namespace WampSharp.V2.Management.Client
{
    //------------------------------------------------------------------------------
    // <auto-generated>
    //     This code was generated by a tool.
    //
    //     Changes to this file may cause incorrect behavior and will be lost if
    //     the code is regenerated.
    // </auto-generated>
    //------------------------------------------------------------------------------
    internal class WampSessionManagementServiceProxy : CalleeProxyBase, IWampSessionManagementServiceProxy
    {
        private static readonly InvokeAsyncDelegate<object> mMethodHandler0 = GetInvokeAsync<object>(
            GetMethodInfo((IWampSessionManagementServiceProxy instance) => instance.KillBySessionIdAsync(default(long), default(string), default(string)))
        );
        private static readonly InvokeAsyncDelegate<int> mMethodHandler1 = GetInvokeAsync<int>(
            GetMethodInfo((IWampSessionManagementServiceProxy instance) => instance.KillByAuthIdAsync(default(string), default(string), default(string)))
        );
        private static readonly InvokeAsyncDelegate<int> mMethodHandler2 = GetInvokeAsync<int>(
            GetMethodInfo((IWampSessionManagementServiceProxy instance) => instance.KillByAuthRoleAsync(default(string), default(string), default(string)))
        );
        private static readonly InvokeAsyncDelegate<int> mMethodHandler3 = GetInvokeAsync<int>(
            GetMethodInfo((IWampSessionManagementServiceProxy instance) => instance.KillAllAsync(default(string), default(string)))
        );

        public WampSessionManagementServiceProxy
                (IWampRealmProxy realmProxy,
                 ICalleeProxyInterceptor interceptor)
            : base(realmProxy, interceptor)
        {
        }
        
        public Task KillBySessionIdAsync(long session, string reason, string message)
        {
            return mMethodHandler0(this, CancellationToken.None, session, reason, message);
        }
        
        public Task<int> KillByAuthIdAsync(string authId, string reason, string message)
        {
            return mMethodHandler1(this, CancellationToken.None, authId, reason, message);
        }
        
        public Task<int> KillByAuthRoleAsync(string authRole, string reason, string message)
        {
            return mMethodHandler2(this, CancellationToken.None, authRole, reason, message);
        }
        
        public Task<int> KillAllAsync(string reason, string message)
        {
            return mMethodHandler3(this, CancellationToken.None, reason, message);
        }
    }
}
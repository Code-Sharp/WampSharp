using System.Reflection;
using System.Threading.Tasks;
using WampSharp.V2.CalleeProxy;
using WampSharp.V2.Client;

namespace WampSharp.V2.MetaApi
{
    //------------------------------------------------------------------------------
    // <auto-generated>
    //     This code was generated by a tool.
    //
    //     Changes to this file may cause incorrect behavior and will be lost if
    //     the code is regenerated.
    // </auto-generated>
    //------------------------------------------------------------------------------
    internal class WampRegistrationDescriptorProxyProxy : CalleeProxyBase, global::WampSharp.V2.MetaApi.IWampRegistrationDescriptorProxy
    {
        private static readonly MethodInfo mMethod0 = GetMethodInfo((global::WampSharp.V2.MetaApi.IWampRegistrationDescriptorProxy instance) => instance.GetAllRegistrationsAsync());
        private static readonly MethodInfo mMethod1 = GetMethodInfo((global::WampSharp.V2.MetaApi.IWampRegistrationDescriptorProxy instance) => instance.LookupRegistrationIdAsync(default(string), default(global::WampSharp.V2.Core.Contracts.RegisterOptions)));
        private static readonly MethodInfo mMethod2 = GetMethodInfo((global::WampSharp.V2.MetaApi.IWampRegistrationDescriptorProxy instance) => instance.GetBestMatchingRegistrationIdAsync(default(string)));
        private static readonly MethodInfo mMethod3 = GetMethodInfo((global::WampSharp.V2.MetaApi.IWampRegistrationDescriptorProxy instance) => instance.GetRegistrationDetailsAsync(default(long)));
        private static readonly MethodInfo mMethod4 = GetMethodInfo((global::WampSharp.V2.MetaApi.IWampRegistrationDescriptorProxy instance) => instance.GetCalleesIdsAsync(default(long)));
        private static readonly MethodInfo mMethod5 = GetMethodInfo((global::WampSharp.V2.MetaApi.IWampRegistrationDescriptorProxy instance) => instance.CountCalleesAsync(default(long)));
        private static readonly MethodInfo mMethod6 = GetMethodInfo((global::WampSharp.V2.MetaApi.IWampRegistrationDescriptorProxy instance) => instance.GetAllRegistrations());
        private static readonly MethodInfo mMethod7 = GetMethodInfo((global::WampSharp.V2.MetaApi.IWampRegistrationDescriptorProxy instance) => instance.LookupRegistrationId(default(string), default(global::WampSharp.V2.Core.Contracts.RegisterOptions)));
        private static readonly MethodInfo mMethod8 = GetMethodInfo((global::WampSharp.V2.MetaApi.IWampRegistrationDescriptorProxy instance) => instance.GetBestMatchingRegistrationId(default(string)));
        private static readonly MethodInfo mMethod9 = GetMethodInfo((global::WampSharp.V2.MetaApi.IWampRegistrationDescriptorProxy instance) => instance.GetRegistrationDetails(default(long)));
        private static readonly MethodInfo mMethod10 = GetMethodInfo((global::WampSharp.V2.MetaApi.IWampRegistrationDescriptorProxy instance) => instance.GetCalleesIds(default(long)));
        private static readonly MethodInfo mMethod11 = GetMethodInfo((global::WampSharp.V2.MetaApi.IWampRegistrationDescriptorProxy instance) => instance.CountCallees(default(long)));

        public WampRegistrationDescriptorProxyProxy
                (IWampRealmProxy realmProxy,
                 ICalleeProxyInterceptor interceptor)
            : base(realmProxy, interceptor)
        {
        }

        public Task<global::WampSharp.V2.MetaApi.AvailableGroups> GetAllRegistrationsAsync()
        {
            return SingleInvokeAsync<global::WampSharp.V2.MetaApi.AvailableGroups>(mMethod0);
        }

        public Task<global::System.Nullable<long>> LookupRegistrationIdAsync(string procedureUri, global::WampSharp.V2.Core.Contracts.RegisterOptions options)
        {
            return SingleInvokeAsync<global::System.Nullable<long>>(mMethod1, procedureUri, options);
        }

        public Task<global::System.Nullable<long>> GetBestMatchingRegistrationIdAsync(string procedureUri)
        {
            return SingleInvokeAsync<global::System.Nullable<long>>(mMethod2, procedureUri);
        }

        public Task<global::WampSharp.V2.MetaApi.RegistrationDetails> GetRegistrationDetailsAsync(long registrationId)
        {
            return SingleInvokeAsync<global::WampSharp.V2.MetaApi.RegistrationDetails>(mMethod3, registrationId);
        }

        public Task<long[]> GetCalleesIdsAsync(long registrationId)
        {
            return SingleInvokeAsync<long[]>(mMethod4, registrationId);
        }

        public Task<long> CountCalleesAsync(long registrationId)
        {
            return SingleInvokeAsync<long>(mMethod5, registrationId);
        }

        public global::WampSharp.V2.MetaApi.AvailableGroups GetAllRegistrations()
        {
            return SingleInvokeSync<global::WampSharp.V2.MetaApi.AvailableGroups>(mMethod6);
        }

        public global::System.Nullable<long> LookupRegistrationId(string procedureUri, global::WampSharp.V2.Core.Contracts.RegisterOptions options)
        {
            return SingleInvokeSync<global::System.Nullable<long>>(mMethod7, procedureUri, options);
        }

        public global::System.Nullable<long> GetBestMatchingRegistrationId(string procedureUri)
        {
            return SingleInvokeSync<global::System.Nullable<long>>(mMethod8, procedureUri);
        }

        public global::WampSharp.V2.MetaApi.RegistrationDetails GetRegistrationDetails(long registrationId)
        {
            return SingleInvokeSync<global::WampSharp.V2.MetaApi.RegistrationDetails>(mMethod9, registrationId);
        }

        public long[] GetCalleesIds(long registrationId)
        {
            return SingleInvokeSync<long[]>(mMethod10, registrationId);
        }

        public long CountCallees(long registrationId)
        {
            return SingleInvokeSync<long>(mMethod11, registrationId);
        }
    }
}
using System;
using System.Linq.Expressions;
using System.Reflection;
using System.Threading.Tasks;
using WampSharp.V2;
using WampSharp.V2.CalleeProxy;
using WampSharp.V2.Client;

namespace WampSharp.V2.MetaApi
{
    //------------------------------------------------------------------------------
    // <auto-generated>
    //     This code was generated by a tool.
    //
    //     Changes to this file may cause incorrect behavior and will be lost if
    //     the code is regenerated.
    // </auto-generated>
    //------------------------------------------------------------------------------
    internal class WampSubscriptionDescriptorProxyProxy : CalleeProxyBase, global::WampSharp.V2.MetaApi.IWampSubscriptionDescriptorProxy
    {
        private static readonly InvokeAsyncDelegate<global::WampSharp.V2.MetaApi.AvailableGroups> mMethodHandler0 = GetInvokeAsync<global::WampSharp.V2.MetaApi.AvailableGroups>(
            GetMethodInfo((global::WampSharp.V2.MetaApi.IWampSubscriptionDescriptorProxy instance) => instance.GetAllSubscriptionIdsAsync())
        );
        private static readonly InvokeAsyncDelegate<global::System.Nullable<long>> mMethodHandler1 = GetInvokeAsync<global::System.Nullable<long>>(
            GetMethodInfo((global::WampSharp.V2.MetaApi.IWampSubscriptionDescriptorProxy instance) => instance.LookupSubscriptionIdAsync(default(string), default(global::WampSharp.V2.Core.Contracts.SubscribeOptions)))
        );
        private static readonly InvokeAsyncDelegate<long[]> mMethodHandler2 = GetInvokeAsync<long[]>(
            GetMethodInfo((global::WampSharp.V2.MetaApi.IWampSubscriptionDescriptorProxy instance) => instance.GetMatchingSubscriptionIdsAsync(default(string)))
        );
        private static readonly InvokeAsyncDelegate<global::WampSharp.V2.MetaApi.SubscriptionDetails> mMethodHandler3 = GetInvokeAsync<global::WampSharp.V2.MetaApi.SubscriptionDetails>(
            GetMethodInfo((global::WampSharp.V2.MetaApi.IWampSubscriptionDescriptorProxy instance) => instance.GetSubscriptionDetailsAsync(default(long)))
        );
        private static readonly InvokeAsyncDelegate<long[]> mMethodHandler4 = GetInvokeAsync<long[]>(
            GetMethodInfo((global::WampSharp.V2.MetaApi.IWampSubscriptionDescriptorProxy instance) => instance.GetSubscribersAsync(default(long)))
        );
        private static readonly InvokeAsyncDelegate<long> mMethodHandler5 = GetInvokeAsync<long>(
            GetMethodInfo((global::WampSharp.V2.MetaApi.IWampSubscriptionDescriptorProxy instance) => instance.CountSubscribersAsync(default(long)))
        );
        private static readonly InvokeSyncDelegate<global::WampSharp.V2.MetaApi.AvailableGroups> mMethodHandler6 = GetInvokeSync<global::WampSharp.V2.MetaApi.AvailableGroups>(
            GetMethodInfo((global::WampSharp.V2.MetaApi.IWampSubscriptionDescriptor instance) => instance.GetAllSubscriptionIds())
        );
        private static readonly InvokeSyncDelegate<global::System.Nullable<long>> mMethodHandler7 = GetInvokeSync<global::System.Nullable<long>>(
            GetMethodInfo((global::WampSharp.V2.MetaApi.IWampSubscriptionDescriptor instance) => instance.LookupSubscriptionId(default(string), default(global::WampSharp.V2.Core.Contracts.SubscribeOptions)))
        );
        private static readonly InvokeSyncDelegate<long[]> mMethodHandler8 = GetInvokeSync<long[]>(
            GetMethodInfo((global::WampSharp.V2.MetaApi.IWampSubscriptionDescriptor instance) => instance.GetMatchingSubscriptionIds(default(string)))
        );
        private static readonly InvokeSyncDelegate<global::WampSharp.V2.MetaApi.SubscriptionDetails> mMethodHandler9 = GetInvokeSync<global::WampSharp.V2.MetaApi.SubscriptionDetails>(
            GetMethodInfo((global::WampSharp.V2.MetaApi.IWampSubscriptionDescriptor instance) => instance.GetSubscriptionDetails(default(long)))
        );
        private static readonly InvokeSyncDelegate<long[]> mMethodHandler10 = GetInvokeSync<long[]>(
            GetMethodInfo((global::WampSharp.V2.MetaApi.IWampSubscriptionDescriptor instance) => instance.GetSubscribers(default(long)))
        );
        private static readonly InvokeSyncDelegate<long> mMethodHandler11 = GetInvokeSync<long>(
            GetMethodInfo((global::WampSharp.V2.MetaApi.IWampSubscriptionDescriptor instance) => instance.CountSubscribers(default(long)))
        );

        public WampSubscriptionDescriptorProxyProxy
                (IWampRealmProxy realmProxy,
                 ICalleeProxyInterceptor interceptor)
            : base(realmProxy, interceptor)
        {
        }
        
        public Task<global::WampSharp.V2.MetaApi.AvailableGroups> GetAllSubscriptionIdsAsync()
        {
            return mMethodHandler0(this, global::System.Threading.CancellationToken.None);
        }
        
        public Task<global::System.Nullable<long>> LookupSubscriptionIdAsync(string topicUri, global::WampSharp.V2.Core.Contracts.SubscribeOptions options)
        {
            return mMethodHandler1(this, global::System.Threading.CancellationToken.None, topicUri, options);
        }
        
        public Task<long[]> GetMatchingSubscriptionIdsAsync(string topicUri)
        {
            return mMethodHandler2(this, global::System.Threading.CancellationToken.None, topicUri);
        }
        
        public Task<global::WampSharp.V2.MetaApi.SubscriptionDetails> GetSubscriptionDetailsAsync(long subscriptionId)
        {
            return mMethodHandler3(this, global::System.Threading.CancellationToken.None, subscriptionId);
        }
        
        public Task<long[]> GetSubscribersAsync(long subscriptionId)
        {
            return mMethodHandler4(this, global::System.Threading.CancellationToken.None, subscriptionId);
        }
        
        public Task<long> CountSubscribersAsync(long subscriptionId)
        {
            return mMethodHandler5(this, global::System.Threading.CancellationToken.None, subscriptionId);
        }
        
        public global::WampSharp.V2.MetaApi.AvailableGroups GetAllSubscriptionIds()
        {
            return mMethodHandler6(this);
        }
        
        public global::System.Nullable<long> LookupSubscriptionId(string topicUri, global::WampSharp.V2.Core.Contracts.SubscribeOptions options)
        {
            return mMethodHandler7(this, topicUri, options);
        }
        
        public long[] GetMatchingSubscriptionIds(string topicUri)
        {
            return mMethodHandler8(this, topicUri);
        }
        
        public global::WampSharp.V2.MetaApi.SubscriptionDetails GetSubscriptionDetails(long subscriptionId)
        {
            return mMethodHandler9(this, subscriptionId);
        }
        
        public long[] GetSubscribers(long subscriptionId)
        {
            return mMethodHandler10(this, subscriptionId);
        }
        
        public long CountSubscribers(long subscriptionId)
        {
            return mMethodHandler11(this, subscriptionId);
        }
    }
}
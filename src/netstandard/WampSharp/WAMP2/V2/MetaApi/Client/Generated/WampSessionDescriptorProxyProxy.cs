using System.Reflection;
using System.Threading.Tasks;
using WampSharp.V2.CalleeProxy;
using WampSharp.V2.Client;

namespace WampSharp.V2.MetaApi
{
    //------------------------------------------------------------------------------
    // <auto-generated>
    //     This code was generated by a tool.
    //
    //     Changes to this file may cause incorrect behavior and will be lost if
    //     the code is regenerated.
    // </auto-generated>
    //------------------------------------------------------------------------------
    internal class WampSessionDescriptorProxyProxy : CalleeProxyBase, global::WampSharp.V2.MetaApi.IWampSessionDescriptorProxy
    {
        private static readonly MethodInfo mMethod0 = GetMethodInfo((global::WampSharp.V2.MetaApi.IWampSessionDescriptorProxy instance) => instance.CountSessionsAsync());
        private static readonly MethodInfo mMethod1 = GetMethodInfo((global::WampSharp.V2.MetaApi.IWampSessionDescriptorProxy instance) => instance.GetAllSessionIdsAsync());
        private static readonly MethodInfo mMethod2 = GetMethodInfo((global::WampSharp.V2.MetaApi.IWampSessionDescriptorProxy instance) => instance.GetSessionDetailsAsync(default(long)));
        private static readonly MethodInfo mMethod3 = GetMethodInfo((global::WampSharp.V2.MetaApi.IWampSessionDescriptorProxy instance) => instance.CountSessions());
        private static readonly MethodInfo mMethod4 = GetMethodInfo((global::WampSharp.V2.MetaApi.IWampSessionDescriptorProxy instance) => instance.GetAllSessionIds());
        private static readonly MethodInfo mMethod5 = GetMethodInfo((global::WampSharp.V2.MetaApi.IWampSessionDescriptorProxy instance) => instance.GetSessionDetails(default(long)));

        public WampSessionDescriptorProxyProxy
                (IWampRealmProxy realmProxy,
                 ICalleeProxyInterceptor interceptor)
            : base(realmProxy, interceptor)
        {
        }

        public Task<long> CountSessionsAsync()
        {
            return SingleInvokeAsync<long>(mMethod0);
        }

        public Task<long[]> GetAllSessionIdsAsync()
        {
            return SingleInvokeAsync<long[]>(mMethod1);
        }

        public Task<global::WampSharp.V2.MetaApi.WampSessionDetails> GetSessionDetailsAsync(long sessionId)
        {
            return SingleInvokeAsync<global::WampSharp.V2.MetaApi.WampSessionDetails>(mMethod2, sessionId);
        }

        public long CountSessions()
        {
            return SingleInvokeSync<long>(mMethod3);
        }

        public long[] GetAllSessionIds()
        {
            return SingleInvokeSync<long[]>(mMethod4);
        }

        public global::WampSharp.V2.MetaApi.WampSessionDetails GetSessionDetails(long sessionId)
        {
            return SingleInvokeSync<global::WampSharp.V2.MetaApi.WampSessionDetails>(mMethod5, sessionId);
        }
    }
}